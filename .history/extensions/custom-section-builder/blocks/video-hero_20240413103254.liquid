{% schema %}
{
  "name": "Video Hero",
  "class": "video-hero",
  "target": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "header",
      "content": "General Settings"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Main Title",
      "default": "Your Main Title Here"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Main Title Color",
      "default": "#000000"
    },
    {
      "type": "text",
      "id": "subtext",
      "label": "Subtitle",
      "default": "Your Subtitle Here"
    },
    {
      "type": "color",
      "id": "subtext_color",
      "label": "Subtitle Color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Button Settings"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "Learn More"
    },
    {
      "type": "url",
      "id": "button_link",
      "label": "Button Link",
      "default": "/"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button Text Color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button Hover Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_hover_text_color",
      "label": "Button Hover Text Color",
      "default": "#FFFFFF"
    },
    {
      "type": "checkbox",
      "id": "enable_rounded_button",
      "label": "Rounded Button",
      "default": false,
      "info": "Toggle to make the button oval-shaped."
    },
    {
      "type": "header",
      "content": "Mobile Display Settings"
    },
    {
      "type": "checkbox",
      "id": "show_heading_on_mobile",
      "label": "Display Main Title on Mobile",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_subtext_on_mobile",
      "label": "Display Subtitle on Mobile",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_button_on_mobile",
      "label": "Display Button on Mobile",
      "default": true
    },
    {
      "type": "header",
      "content": "Video Settings"
    },
    {
      "type": "radio",
      "id": "video_type",
      "label": "Video Type",
      "options": [
        {
          "value": "upload",
          "label": "Upload Video"
        },
        {
          "value": "external",
          "label": "External Video"
        }
      ],
      "default": "upload"
    },
    {
      "type": "video",
      "id": "video",
      "label": "Standard Video"
    },
    {
      "type": "text",
      "id": "video_url",
      "label": "External Video URL",
      "info": "Supports YouTube, Vimeo.",
      "default": "https://www.youtube.com/watch?v=_9VUPq3SxOc"
    },
    {
      "type": "video",
      "id": "mobile_video",
      "label": "Vertical Video for Mobile",
      "info": "Preferably in a vertical (9:16) format."
    },
    {
      "type": "checkbox",
      "id": "enable_mobile_video",
      "label": "Use Vertical Video on Mobile",
      "default": false,
      "info": "Switches to the vertical video for mobile viewers."
    },
    {
      "type": "image_picker",
      "id": "cover_image",
      "label": "Cover Image"
    },
    {
      "type": "text",
      "id": "description",
      "label": "Video Description - ALT Text"
    },
    {
      "type": "select",
      "id": "video_behavior",
      "label": "Video Behavior",
      "options": [
        {
          "value": "autoplay",
          "label": "Autoplay"
        },
        {
          "value": "cover",
          "label": "Show Cover Image"
        }
      ],
      "default": "autoplay"
    },
    {
      "type": "header",
      "content": "Layout Settings"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "Padding Top",
      "default": 5
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "Padding Bottom",
      "default": 5
    }
  ]
}
{% endschema %}

{{ 'video-hero.css' | asset_url | stylesheet_tag }}

<script src="{{ 'video-hero.js' | asset_url }}" defer></script> 

<div class="adedayo-video-hero" style="padding-top: {{ block.settings.padding_top }}px; padding-bottom: {{ block.settings.padding_bottom }}px;"> 
  <div class="adedayo-video-hero-wrapper{% if block.settings.enable_mobile_video %} hide-on-mobile{% endif %}"> 
    {% if block.settings.video_type == 'external' and block.settings.video_url != blank %} 
      <iframe class="adedayo-video-hero-background" width="100%" height="100%" src="{{ block.settings.video_url }}" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe> 
      {% if block.settings.cover_image != blank and block.settings.video_behavior == 'cover' %} 
        <div class="adedayo-video-hero-cover-image-container"> 
          <img src="{{ block.settings.cover_image | image_url: width: 1080 }}" alt="{{ block.settings.description }}" class="adedayo-video-hero-poster"> 
          <button class="adedayo-video-hero-play-button"> 
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon icon-play"> 
              <path fill="currentColor" d="M8 5v14l11-7z"/> 
            </svg> 
          </button> 
        </div> 
      {% endif %} 
    {% elsif block.settings.video != null %} 
      {% if block.settings.cover_image != blank and block.settings.video_behavior == 'cover' %} 
        <div class="adedayo-video-hero-cover-image-container"> 
          <img src="{{ block.settings.cover_image | image_url: width: 1080 }}" alt="{{ block.settings.description }}" class="adedayo-video-hero-poster"> 
          <button class="adedayo-video-hero-play-button"> 
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon icon-play"> 
              <path fill="currentColor" d="M8 5v14l11-7z"/> 
            </svg> 
          </button> 
        </div> 
      {% endif %} 
      {% if block.settings.video_behavior == 'autoplay' or block.settings.video_behavior == 'cover' %} 
        <video class="adedayo-video-hero-background" playsinline{% if block.settings.video_behavior == 'autoplay' %} autoplay{% endif %} muted> 
          {% for source in block.settings.video.sources %} 
            <source src="{{ source.url }}" type="{{ source.mime_type }}"> 
          {% endfor %} 
          Your browser does not support the video tag. 
        </video> 
      {% endif %} 
    {% endif %} 
  </div>
  {% if block.settings.enable_mobile_video and block.settings.mobile_video != null %}
    <div class="adedayo-video-hero-wrapper adedayo-video-hero-mobile-video{% unless block.settings.enable_mobile_video %} hide-on-desktop{% endunless %}">
      {% if block.settings.cover_image != blank and block.settings.video_behavior == 'cover' %}
        <div class="adedayo-video-hero-cover-image-container">
          <img src="{{ block.settings.cover_image | image_url: width: 1080 }}" alt="{{ block.settings.description }}" class="adedayo-video-hero-poster">
          <button class="adedayo-video-hero-play-button">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon icon-play">
              <path fill="currentColor" d="M8 5v14l11-7z"/>
            </svg>
          </button>
        </div>
      {% endif %}
      {% if block.settings.video_behavior == 'autoplay' or block.settings.video_behavior == 'cover' %}
        <video class="adedayo-video-hero-background" playsinline{% if block.settings.video_behavior == 'autoplay' %} autoplay{% endif %} muted>
          {% for source in block.settings.mobile_video.sources %}
            <source src="{{ source.url }}" type="{{ source.mime_type }}">
          {% endfor %}
          Your browser does not support the video tag.
        </video>
      {% endif %}
    </div>
  {% endif %}
  <div class="adedayo-video-hero-overlay"> 
    <h1 class="adedayo-video-hero-text{% unless block.settings.show_heading_on_mobile %} hide-on-mobile{% endunless %}" style="color: {{ block.settings.heading_color }};"> {{ block.settings.heading }} </h1> 
    <p class="adedayo-video-hero-subtext{% unless block.settings.show_subtext_on_mobile %} hide-on-mobile{% endunless %}" style="color: {{ block.settings.subtext_color }};"> {{ block.settings.subtext }} </p> 
    <div class="adedayo-video-hero-button-container"> 
      <a href="{{ block.settings.button_link }}" class="adedayo-video-hero-button{% if block.settings.enable_rounded_button %} adedayo-video-hero-rounded-button{% endif %}{% unless block.settings.show_button_on_mobile %} hide-on-mobile{% endunless %}" style="background-color: {{ block.settings.button_color }}; color: {{ block.settings.button_text_color }};" onmouseover="this.style.backgroundColor='{{ block.settings.button_hover_color }}'; this.style.color='{{ block.settings.button_hover_text_color }}';" onmouseout="this.style.backgroundColor='{{ block.settings.button_color }}'; this.style.color='{{ block.settings.button_text_color }}';"> {{ block.settings.button_text }} </a> 
    </div> 
  </div> 
</div>
CSS: @media (min-width: 768px) {
  .adedayo-video-hero {
  position: relative;
  width: 100%;
  height: 100vh;
  overflow: hidden;
  }
  
  .adedayo-video-hero-background {
  width: 100%;
  height: 100%;
  object-fit: cover;
  z-index: 1;
  }
  
  .adedayo-video-hero-wrapper,
  .adedayo-video-hero-mobile-video {
  position: relative;
  width: 100%;
  height: 100vh;
  }
  
  .adedayo-video-hero-cover-image-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 2;
  }
  
  .adedayo-video-hero-poster {
  width: 100%;
  height: 100%;
  object-fit: cover;
  }
  
  .adedayo-video-hero-play-button {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 3;
  width: 80px;
  height: 80px;
  background-color: rgba(255, 255, 255, 0.8);
  border-radius: 50%;
  border: none;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  }
  
  .adedayo-video-hero-play-button .icon {
  width: 40px;
  height: 40px;
  color: #000;
  }
  
  .adedayo-video-hero-overlay {
  position: absolute;
  left: 5%;
  bottom: 20%;
  width: 45%;
  color: #fff;
  z-index: 4;
  }
  
  .adedayo-video-hero-text {
  font-size: 2em;
  font-weight: bold;
  margin-bottom: 0.5em;
  color: {{ block.settings.heading_color }};
  display: block;
  }
  
  .adedayo-video-hero-subtext {
  font-size: 1em;
  font-weight: normal;
  margin-bottom: 1em;
  color: {{ block.settings.subtext_color }};
  display: block;
  }
  
  .adedayo-video-hero-button {
  display: inline-block;
  padding: 10px 20px;
  text-decoration: none;
  font-size: 1em;
  border: none;
  cursor: pointer;
  white-space: nowrap;
  background-color: {{ block.settings.button_color }};
  color: {{ block.settings.button_text_color }};
  }
  
  .adedayo-video-hero-button.adedayo-video-hero-rounded-button {
  border-radius: 50px;
  }
  
  .adedayo-video-hero-button:hover {
  background-color: {{ block.settings.button_hover_color }};
  color: {{ block.settings.button_hover_text_color }};
  }
  
  .hide-on-desktop {
  display: none !important;
  }
  }
  
  @media (max-width: 767px) {
  .adedayo-video-hero {
  position: relative;
  width: 100%;
  overflow: hidden;
  height: 100vh;
  }
  
  .adedayo-video-hero-background,
  .adedayo-video-hero-mobile-video video {
  width: 100%;
  height: 100vh;
  object-fit: cover;
  z-index: 1;
  }
  
  .adedayo-video-hero-wrapper,
  .adedayo-video-hero-mobile-video {
  width: 100%;
  height: 100vh;
}

.adedayo-video-hero-cover-image-container {
position: absolute;
top: 0;
left: 0;
width: 100%;
height: 100%;
z-index: 2;
}

.adedayo-video-hero-poster {
width: 100%;
height: 100%;
object-fit: cover;
}

.adedayo-video-hero-play-button {
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
z-index: 3;
width: 80px;
height: 80px;
background-color: rgba(255, 255, 255, 0.8);
border-radius: 50%;
border: none;
cursor: pointer;
display: flex;
justify-content: center;
align-items: center;
}

.adedayo-video-hero-play-button .icon {
width: 40px;
height: 40px;
color: #000;
}

.adedayo-video-hero-overlay {
position: absolute;
bottom: 0;
left: 0;
width: 100%;
padding: 20px;
box-sizing: border-box;
text-align: left;
z-index: 4;
}

.adedayo-video-hero-text {
font-size: 1.5em;
margin-bottom: 0.25em;
}

.adedayo-video-hero-subtext {
font-size: 1em;
margin-bottom: 1em;
}

.adedayo-video-hero-button-container {
display: flex;
justify-content: flex-start;
}

.adedayo-video-hero-button {
padding: 10px 20px;
margin-top: 0.5em;
text-decoration: none;
font-size: 1em;
border: none;
cursor: pointer;
white-space: nowrap;
background-color: #000000;
color: #FFFFFF;
}

.adedayo-video-hero-button.adedayo-video-hero-rounded-button {
border-radius: 50px;
}

.hide-on-mobile {
display: none !important;
}
} JS: document.addEventListener('DOMContentLoaded', function() {
  // Function to convert YouTube URL to an embed URL
  function convertToEmbedUrl(url) {
    const regExp = /^.*(youtu.be\/|v\/|e\/|u\/\w+\/|embed\/|v=)([^#\&\?]*).*/;
    const match = url.match(regExp);
    if (match && match[2].length === 11) {
      // Enable JavaScript API for additional control if needed
      return `https://www.youtube.com/embed/${match[2]}?autoplay=1&mute=1&enablejsapi=1&loop=1&playlist=${match[2]}`;
    } else {
      // Return the original URL if it doesn't match YouTube video pattern
      return url;
    }
  }

  // Update YouTube iframe src to use the embed URL
  document.querySelectorAll('.adedayo-video-hero-background').forEach(function(video) {
    if (video.tagName === 'IFRAME') {
      const videoSrc = video.getAttribute('src');
      const newSrc = convertToEmbedUrl(videoSrc);
      video.setAttribute('src', newSrc);
    }
  });

  // Handles video play and cover image visibility
  function playVideo(videoWrapper) {
    const video = videoWrapper.querySelector('video, iframe');
    const poster = videoWrapper.querySelector('.adedayo-video-hero-poster');
    const playButton = videoWrapper.querySelector('.adedayo-video-hero-play-button');

    if (video) {
      if (video.tagName === 'VIDEO') {
        // Mute the video to satisfy the autoplay policies of most browsers
        video.muted = true;
        // Attempt to play the video
        video.play().then(function() {
          // Hide the poster and play button on successful play
          if (poster) {
            poster.style.opacity = '0';
            setTimeout(function() {
              poster.style.display = 'none';
            }, 500);
          }
          if (playButton) {
            playButton.style.display = 'none';
          }
        }).catch(function(error) {
          // Log an error if play was not possible, for example, due to user interaction policies
          console.error('Error attempting to play video:', error);
        });
      } else if (video.tagName === 'IFRAME') {
        // For YouTube videos, trigger play by sending a postMessage to the iframe
        video.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
        // Hide the poster and play button
        if (poster) {
          poster.style.opacity = '0';
          setTimeout(function() {
            poster.style.display = 'none';
          }, 500);
        }
        if (playButton) {
          playButton.style.display = 'none';
        }
      }
    }
  }

  // Add event listeners to play buttons for custom video play functionality
  document.querySelectorAll('.adedayo-video-hero-play-button').forEach(function(button) {
    button.addEventListener('click', function() {
      const videoWrapper = button.closest('.adedayo-video-hero-wrapper, .adedayo-video-hero-mobile-video');
      if (videoWrapper) {
        playVideo(videoWrapper);
      }
    });
  });

  // Handles video behavior based on settings such as autoplay, looping, or showing the cover
  function handleVideoBehavior(videoWrapper) {
    const video = videoWrapper.querySelector('video, iframe');
    const poster = videoWrapper.querySelector('.adedayo-video-hero-poster');
    const playButton = videoWrapper.querySelector('.adedayo-video-hero-play-button');

    if (video) {
      if (video.tagName === 'VIDEO') {
        video.muted = true; // Mute the video to allow for autoplay
        video.loop = true; // Enable looping for user-uploaded videos

        // If the video has the autoplay attribute, attempt to play it
        if (video.hasAttribute('autoplay')) {
          video.play().then(function() {
            // Hide the poster and play button on successful autoplay
            if (poster) {
              poster.style.opacity = '0';
              setTimeout(function() {
                poster.style.display = 'none';
              }, 500);
            }
            if (playButton) {
              playButton.style.display = 'none';
            }
          }).catch(function(error) {
            // Log an error if autoplay was not possible
            console.error('Error attempting to autoplay video:', error);
            // If autoplay fails, show the cover image and play button
            if (poster) {
              poster.style.display = 'block';
              poster.style.opacity = '1';
            }
            if (playButton) {
              playButton.style.display = 'block';
            }
          });
        } else {
          // If autoplay is not enabled, make sure the cover image and play button are visible
          if (poster) {
            poster.style.display = 'block';
            poster.style.opacity = '1';
          }
          if (playButton) {
            playButton.style.display = 'block';
          }
        }
      } else if (video.tagName === 'IFRAME') {
        // For YouTube videos, show the cover image and play button
        if (poster) {
          poster.style.display = 'block';
          poster.style.opacity = '1';
        }
        if (playButton) {
          playButton.style.display = 'block';
        }
      }
    }
  }

  // Apply video behavior for desktop and mobile video wrappers
  document.querySelectorAll('.adedayo-video-hero-wrapper, .adedayo-video-hero-mobile-video').forEach(function(videoWrapper) {
    handleVideoBehavior(videoWrapper);
  });
});